* Divide and conquer algorithm
* Recursive algorithm
* Two phases: Splitting and Merging
* Splitting phase leads to faster sorting during the Mergin phase
* Splitting is logical. We don't create new arrays


********************************************************
Merge Sort - Merging Phase

* Merge every left/right pair of sibling arrays into a sorted array
* After the first merge, we'll have a bunch of 2-element sorted arrays
* Then merge those sorted arrays(left/right siblings) to end up with a bunch of 4-element sorted arrays
* Repeat until you have a single sorted array
* Not in-place, Uses temporary arrays.


***********************************************************
Merging Process
* We merge sibling left and right arrays
* We create a temporary array large enough to hold all the elements in the arrays we are merging
* We set i to the first index of the left array, and j to the first index of the right array
* We compare left[i] to right[j]. If left is smaller, we copy it to the temp array and increment i by 1.
If right is smaller, we copy it to the temp array and increment j by 1.


********************************************************************
* Not an in-place algorithm
* O(nlogn) - base 2. We are repeatedly dividing the array in half during the splitting phase
* Stable algorithm
